// server.js
import express from 'express';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
// CORRE√á√ÉO COMUM: Adicionar import 'cors'
import cors from 'cors';

// VERIFIQUE: O caminho para o modelo est√° correto?
// Ele deve sair da raiz do projeto e entrar na pasta 'models'.
import Veiculo from './models/Veiculo.js';

// Carrega as vari√°veis de ambiente do arquivo .env
dotenv.config();

const app = express();
const port = process.env.PORT || 3001;

// --- Middlewares Essenciais ---
// Habilita o CORS para permitir requisi√ß√µes do seu frontend (http://127.0.0.1:5500, etc.)
app.use(cors());
// Habilita o express a "entender" o corpo de requisi√ß√µes enviado em formato JSON. Essencial para o POST.
app.use(express.json());

// --- Conex√£o com o MongoDB Atlas ---
const mongoUri = process.env.MONGO_URI;

// VERIFICA√á√ÉO DE SEGURAN√áA: Checa se a URI do banco de dados foi definida no .env
if (!mongoUri) {
    console.error("FATAL: A vari√°vel de ambiente MONGO_URI n√£o est√° definida no arquivo .env");
    process.exit(1); // Encerra o servidor se a string de conex√£o n√£o existir.
}

// Tenta se conectar ao banco de dados.
mongoose.connect(mongoUri)
    .then(() => {
        console.log("‚úÖ Conectado ao MongoDB Atlas com sucesso!");

        // S√≥ inicia o servidor Express DEPOIS que a conex√£o com o banco for bem-sucedida.
        app.listen(port, () => {
            console.log(`üöó Servidor da Garagem Inteligente rodando em http://localhost:${port}`);
            console.log(`üîó Endpoints CRUD de ve√≠culos dispon√≠veis em /api/veiculos`);
        });

    })
    .catch(err => {
        // Se a conex√£o inicial falhar, exibe o erro e encerra o processo.
        console.error("‚ùå Erro fatal ao conectar com o MongoDB Atlas:", err);
        process.exit(1);
    });

// --- Rotas da API (Endpoints) ---

// Rota raiz para teste
app.get('/', (req, res) => {
    res.status(200).send('<h1>üöÄ API da Garagem Inteligente V3 com MongoDB est√° no ar!</h1>');
});

/**
 * @route   POST /api/veiculos
 * @desc    Cria um novo ve√≠culo no banco de dados.
 */
app.post('/api/veiculos', async (req, res) => {
    // Usamos um bloco try...catch para capturar qualquer erro que aconte√ßa
    // durante a intera√ß√£o com o banco de dados.
    try {
        const novoVeiculoData = req.body;
        console.log('[Servidor] Recebido para criar:', novoVeiculoData);

        const veiculoCriado = await Veiculo.create(novoVeiculoData);
        
        console.log('[Servidor] Ve√≠culo persistido no DB:', veiculoCriado);
        res.status(201).json(veiculoCriado); // Retorna 201 (Created)

    } catch (error) {
        console.error("[Servidor] Erro ao criar ve√≠culo:", error);
        
        if (error.code === 11000) {
            return res.status(409).json({ message: `Ve√≠culo com a placa '${error.keyValue.placa}' j√° existe.` });
        }
        if (error.name === 'ValidationError') {
             const messages = Object.values(error.errors).map(val => val.message);
             return res.status(400).json({ message: `Dados inv√°lidos: ${messages.join(' ')}` });
        }

        res.status(500).json({ message: 'Ocorreu um erro interno ao criar o ve√≠culo.' });
    }
});

/**
 * @route   GET /api/veiculos
 * @desc    Busca e retorna todos os ve√≠culos do banco de dados.
 */
app.get('/api/veiculos', async (req, res) => {
    try {
        const todosOsVeiculos = await Veiculo.find().sort({ createdAt: -1 });
        
        console.log(`[Servidor] ${todosOsVeiculos.length} ve√≠culos encontrados e enviados.`);
        res.status(200).json(todosOsVeiculos);

    } catch (error) {
        console.error("[Servidor] Erro ao buscar ve√≠culos:", error);
        res.status(500).json({ message: 'Ocorreu um erro interno ao buscar os ve√≠culos.' });
    }
});

// Nota: os endpoints da API de clima e outros mocks que voc√™ tinha foram removidos
// para focar na tarefa atual. Voc√™ pode adicion√°-los de volta se precisar.

// **N√ÉO COLOCAMOS app.listen AQUI NOVAMENTE**
// Ele agora est√° dentro do .then() da conex√£o do Mongoose.